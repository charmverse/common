# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: ['**']

jobs:
  build-test-env:
    name: Build test env
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/install

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: build-test-env
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        include:
          - test_name: "Type check"
            test_command: "npm run typecheck"
    steps:
      - uses: actions/checkout@v3

      - name: Restore dependencies from cache
        uses: ./.github/actions/install

      - name: Run ${{matrix.test_name}}
        run: ${{matrix.test_command}}

  push-rc-package:
    if: github.event_name == 'pull_request' && ( github.event.action == 'opened' || github.event.action == 'synchronize' )
    name: Push Release candidate package to allow devs to use to test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: package and publish release candidate pkg
        uses: ./.github/actions/package_n_publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }} 
      - uses: convictional/trigger-workflow-and-wait@v1.6.1
        with:
          owner: charmverse
          repo: app.charmverse.io
          github_token: ${{ secrets.WORKFLOW_TRIGGER_PAT }}
          github_user: yiwork
          workflow_file_name: test_new_core_pkg.yml
          ref: main
          wait_interval: 10
          propagate_failure: true
          trigger_workflow: true
          wait_workflow: true

  # trigger-downstream-repo-workflow:
  #   if: github.event_name == 'pull_request' && ( github.event.action == 'opened' || github.event.action == 'synchronize' )
  #   name: Trigger other webapp and permissions api testing workflow
  #   runs-on: ubuntu-latest
  #   needs: push-rc-package
  #   strategy:
  #     max-parallel: 2
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - : "Basic tests #1"
  #           test_command: "npm run test:ci -- --shard 1/2"
  #         - test_name: "Basic tests #2"
  #           test_command: "npm run test:ci -- --shard 2/2"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: package and publish release candidate pkg
  #       uses: ./.github/actions/package_n_publish
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }} 

  integration-test:
    name: Tests
    runs-on: ubuntu-latest
    needs: build-test-env
    # Postgres setup copied from https://gist.github.com/2color/537f8ef13ecec80059abb007839a6878
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        include:
          - test_name: "Basic tests #1"
            test_command: "npm run test:ci -- --shard 1/2"
          - test_name: "Basic tests #2"
            test_command: "npm run test:ci -- --shard 2/2"
    steps:
      - uses: actions/checkout@v3

      - name: Restore dependencies from cache
        uses: ./.github/actions/install

      - name: Setup test database
        run: npx dotenv -e .env.test.local -- npm run prisma:reset

      - name: Run ${{matrix.test_name}}
        run: ${{matrix.test_command}}

  push-full-release:
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    name: Pkg and push full release on main
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - uses: actions/checkout@v3
      - name: package and publish release candidate pkg
        uses: ./.github/actions/package_n_publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
